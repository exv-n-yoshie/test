name: プルリクエストを承認時ディプロイする

on:
  push:
    branches:
      - develop
      - staging

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }} # ワークフローの実行をグループ化する
  cancel-in-progress: true # 同一グループで重複してジョブが走った場合既存のジョブをキャンセルする

defaults:
  run:
    shell: bash # シェルを bash に設定することで、パイプラインのエラーが発生した場合にスクリプトが停止するようになる

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 5 # タイムアウト時間を設定
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
    steps:
      - name: Gitのセットアップ
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: キャッシュを有効にする
        uses: actions/cache@v4
        with:
          path: .
          key: ${{ runner.OS }}-deployment-${{ github.ref }}
          restore-keys: |
            ${{ runner.OS }}-deployment-${{ github.ref }}

      - name: リポジトリをクローン
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ ! -d "${GITHUB_REPOSITORY#*/}" ]; then
            echo "リポジトリをクローンします。"
            git clone https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          fi

      - name: Node.js のセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: 14.21.3

      - name: リポジトリがキャッシュされていた場合今回のユーザで置き換える
        run: |
          cd "${GITHUB_REPOSITORY#*/}"
          git remote set-url origin https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ブランチのマージ
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_PULL_REQUEST_BASE_REF: ${{ github.ref_name }} # 中間変数を使うとスクリプトインジェクションが防げる
        run: |
          cd "${GITHUB_REPOSITORY#*/}"
          echo "マージするブランチを取得"
          git fetch origin $GITHUB_PULL_REQUEST_BASE_REF
          git checkout $GITHUB_PULL_REQUEST_BASE_REF
          git pull origin $GITHUB_PULL_REQUEST_BASE_REF

          echo "ベースになるブランチを取得し切り替える"
          git fetch origin ${GITHUB_PULL_REQUEST_BASE_REF}-deployed
          git checkout ${GITHUB_PULL_REQUEST_BASE_REF}-deployed
          git pull origin ${GITHUB_PULL_REQUEST_BASE_REF}-deployed

          echo "マージする"
          git merge origin/$GITHUB_PULL_REQUEST_BASE_REF --no-edit --no-ff

      - name: プロジェクトをビルド
        env:
          GITHUB_PULL_REQUEST_BASE_REF: ${{ github.ref_name }}
        run: |
          # cd "${GITHUB_REPOSITORY#*/}/mfc-user"
          # rm -rf dist/*

          # base_ref="$GITHUB_PULL_REQUEST_BASE_REF"

          # # ブランチ名をチェックし、環境変数を設定
          # if [ "$base_ref" == "develop" ]; then
          #     environment="dev"
          # elif [ "$base_ref" == "staging" ]; then
          #     environment="stg"
          # else
          #     echo "Error: ブランチ名が不正です。($base_ref)"
          #     exit 1
          # fi
          # echo "environment: $environment"

          # echo "npmのモジュールインストール"
          # npm install --no-bin-links

          # echo "ビルド"
          # npx gulp $environment
          cd "${GITHUB_REPOSITORY#*/}"
          echo 1 >> test.txt

      - name: イベント情報を表示
        run: echo '${{toJSON(github.event)}}'

      - name: コミットメッセージを取得
        run: |
          commits_length=$(jq '.commits | length' <<< "${{ toJson(github.event) }}")
          second_to_last_index=$((commits_length - 2))
          if [ $second_to_last_index -ge 0 ]; then
            second_to_last_message=$(jq -r ".commits[$second_to_last_index].message" <<< "${{ toJson(github.event) }}")
            echo "マージ前のコミットメッセージ: $second_to_last_message"
            echo "COMMIT_MESSAGE=$second_to_last_message" >> $GITHUB_ENV
          else
            echo "マージのコミットメッセージしかなかったのでそれをコミットメッセージとする"
            second_to_last_message=$(jq -r ".commits[0].message" <<< "${{ toJson(github.event) }}")
          fi

          # メッセージをサニタイズ
          sanitized_message=$(echo "$second_to_last_message" | sed 's/[&;<>$()`|*?#]//g' | tr -d "'" | tr -d '"')

          # サニタイズされたメッセージを$GITHUB_ENVに設定
          echo "COMMIT_MESSAGE=$sanitized_message" >> $GITHUB_ENV

      - name: デプロイ用ブランチにコミット
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_PULL_REQUEST_BASE_REF: ${{ github.ref_name }}
        run: |
          cd "${GITHUB_REPOSITORY#*/}"
          git add .
          git commit -m "${GITHUB_PULL_REQUEST_BASE_REF} ${env.COMMIT_MESSAGE%%$'\n'*} ディプロイ"
          git push origin HEAD
